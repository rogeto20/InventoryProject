@page "/salessummary"
@inject HttpClient Http

<h3>Sales Summary</h3>

<p>This component demonstrates sales data from the server.</p>

@if (salesModel.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Total Profit = @profit Ksh</p>
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th scope="col">Order Number</th>
                <th scope="col">Product</th>
                <th scope="col">Date Sold</th>
                <th scope="col">Quantity Ordered</th>
                <th scope="col">Selling Price</th>
                <th scope="col">Buying Price</th>
                <th scope="col">Profit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sale in salesModel)
                {
                <tr>
                    <td>@sale.OrderNumber</td>
                    <td>@sale.ProductName</td>
                    <td>@sale.DateSold</td>
                    <td>@sale.QuantityOrdered</td>
                    <td>@sale.SellingPrice</td>
                    <td>@sale.BuyingPrice</td>
                    <td>@sale.Profit</td>
                </tr>
                }
        </tbody>
    </table>
}


@code {
    private Sales[] sales;
    private List<SalesViewModel> salesModel = new List<SalesViewModel>();
    private Products[] products;
    private int profit = 0;

    protected override async Task OnInitializedAsync()
    {
        sales = await Http.GetFromJsonAsync<Sales[]>("sample-data/sales.json");
        products = await Http.GetFromJsonAsync<Products[]>("sample-data/products.json");

        foreach(var sale in sales)
        {
            var item = new SalesViewModel
            {
                    ProductName = products.FirstOrDefault(x => x.ProductId.Equals(sale.ProductId)).ProductName,
                    OrderNumber = sale.OrderNumber,
                    QuantityOrdered = sale.QuantityOrdered,
                    SellingPrice = sale.SellingPrice,
                    BuyingPrice = products.FirstOrDefault(x => x.ProductId.Equals(sale.ProductId)).BuyingPrice,
                    DateSold = sale.DateSold,
                    Profit = sale.SellingPrice - products.FirstOrDefault(x => x.ProductId.Equals(sale.ProductId)).BuyingPrice
                };
            salesModel.Add(item);
            profit += item.Profit * item.QuantityOrdered;
        }
    }

    public class Sales
    {
        public int ProductId { get; set; }
        public int OrderNumber { get; set; }
        public int QuantityOrdered { get; set; }
        public int SellingPrice { get; set; }
        public DateTime DateSold { get; set; }
    }

    public class SalesViewModel
    {
        public string ProductName { get; set; }
        public int OrderNumber { get; set; }
        public int QuantityOrdered { get; set; }
        public int BuyingPrice { get; set; }
        public int SellingPrice { get; set; }
        public int Profit { get; set; }
        public DateTime DateSold { get; set; }
    }

    public class Products
    {
        public int ProductId { get; set; }
        public string ProductName { get; set; }
        public int QuantityInStock { get; set; }
        public int BuyingPrice { get; set; }
    }

}
